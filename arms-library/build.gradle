apply plugin: 'com.android.library'
//打包aar所需
apply plugin: 'maven'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {
    //support
    api rootProject.ext.dependencies["support-v4"]
    api rootProject.ext.dependencies["appcompat-v7"]
    api rootProject.ext.dependencies["support-annotations"]
    api rootProject.ext.dependencies["support-content"]
    api rootProject.ext.dependencies["recyclerview-v7"]
    api rootProject.ext.dependencies["design"]
    //rxjava
    api rootProject.ext.dependencies.rxjava
    api rootProject.ext.dependencies.rxandroid
    //rx管理View的生命周期
    api(rootProject.ext.dependencies.rxlifecycle) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["rxlifecycle-components"]) {
        exclude group: 'com.android.support'
    }
    //rxbinding
    api(rootProject.ext.dependencies.rxbinding) {
        exclude group: 'com.android.support'
    }
    //rx权限请求
    api(rootProject.ext.dependencies.rxpermissions) {
        exclude group: 'com.android.support'
    }
    //rx缓存
    api(rootProject.ext.dependencies["rxcache2"]) {
        exclude module: 'rxjava'
        exclude module: 'dagger'
        exclude module: 'api'
    }
    api(rootProject.ext.dependencies["rxcache-jolyglot-gson"]) {
        exclude module: 'gson'
    }

    //network
    api rootProject.ext.dependencies.okhttp
    api rootProject.ext.dependencies.retrofit
    api rootProject.ext.dependencies["converter-gson"]
    api rootProject.ext.dependencies["adapter-rxjava"]
    api rootProject.ext.dependencies['rxerrorhandler2']
    //json解析
    api rootProject.ext.dependencies.gson
    //material-dialogs
    api(rootProject.ext.dependencies["material-dialogs-core"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["material-dialogs-commons"]) {
        exclude group: 'com.android.support'
    }

    //glide图片加载库
    api(rootProject.ext.dependencies.glide) {
        exclude group: 'com.android.support'
    }

    //recyclerview的databinding套装
    api(rootProject.ext.dependencies.bindingcollectionadapter) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["bindingcollectionadapter-recyclerview"]) {
        exclude group: 'com.android.support'
    }
    api(rootProject.ext.dependencies["bindingcollectionadapter-viewpager2"]) {
        exclude group: 'com.android.support'
    }
    //Google LiveData和ViewModel组件
    api rootProject.ext.dependencies["lifecycle-extensions"]
    annotationProcessor rootProject.ext.dependencies["lifecycle-compiler"]
    //dagger2
    api rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    //test
    api rootProject.ext.dependencies["timber"]

    //阿里路由框架
    api rootProject.ext.dependencies["arouter-api"]
    //butterknife框架
    api rootProject.ext.dependencies["butterknife"]
    annotationProcessor(rootProject.ext.dependencies["butterknife-compiler"]) {
        exclude module: 'support-annotations'
    }
    //view
    compileOnly rootProject.ext.dependencies["autolayout"]

    //分包
    api rootProject.ext.dependencies["multidex"]
    //通信
    compileOnly rootProject.ext.dependencies["androideventbus"]
    compileOnly rootProject.ext.dependencies["eventbus"]

    //使用一行代码监听 Retrofit／Okhttp 上传下载进度监听,以及 Glide 加载进度监听,
    //TODO 代码下载自己维护了
//    api rootProject.ext.dependencies["progressmanager"]
    //让 Retrofit 同时支持多个 BaseUrl 以及动态改变 BaseUrl
    //TODO 代码下载自己维护了
//    api rootProject.ext.dependencies["retrofit-url-manager"]
    api project(path: ':retrofitUrlManager-library')
    api project(path: ':progressManager-library')
}
//打包aar
//uploadArchives {
//    repositories.mavenDeployer {
//        // Ubuntu本地仓库路径， Windows 为(url:"file://D://***/***/***/")
//        repository(url: "file://E://Learn/TestPro/2020-04-07/LocalRepository")
//        // 唯一标识
//        pom.groupId = "com.herenit.arms"
//        // 项目名称
//        pom.artifactId = "library-arms"
//        // 版本号
//        pom.version = "1.0.0"
//    }
//}


//////// 打包发布配置开始 ////////
ext {
    // 从Github上clone下来的项目的本地地址
    GITHUB_REPO_PATH = "file://E://Work/Repositories/arms"       //这里指定的就是刚刚新建项目后clone下来的在本地的路径

    PUBLISH_GROUP_ID = 'com.herenit.arms'

    PUBLISH_ARTIFACT_ID = 'library-arms'

    PUBLISH_VERSION = '1.0.0'

}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(project.GITHUB_REPO_PATH)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
        }
    }
}

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//////// 打包发布配置结束 ////////

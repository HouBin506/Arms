apply plugin: 'com.android.library'
//打包aar所需
apply plugin: 'maven'
android {
    compileSdkVersion rootProject.ext.android["compileSdkVersion"]
    buildToolsVersion rootProject.ext.android["buildToolsVersion"]
    useLibrary 'org.apache.http.legacy'

    compileOptions {
        targetCompatibility JavaVersion.VERSION_1_8
        sourceCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.android["minSdkVersion"]
        targetSdkVersion rootProject.ext.android["targetSdkVersion"]
        versionCode rootProject.ext.android["versionCode"]
        versionName rootProject.ext.android["versionName"]
    }

    buildTypes {
        product {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    //support
    api(rootProject.ext.dependencies["support-v4"]) {
        exclude module: 'support-annotations'
    }
    api(rootProject.ext.dependencies["appcompat-v7"]) {
        exclude module: 'support-annotations'
    }
    compileOnly rootProject.ext.dependencies["design"]
    api(rootProject.ext.dependencies["recyclerview-v7"]) {
        exclude module: 'support-annotations'
    }
    api rootProject.ext.dependencies["annotations"]
    //分包
    implementation rootProject.ext.dependencies["multidex"]

    //view
    compileOnly rootProject.ext.dependencies["autolayout"]
    api(rootProject.ext.dependencies["butterknife"]) {
        exclude module: 'support-annotations'
        exclude module: 'support-compat'
    }

    //rx
    api rootProject.ext.dependencies["rxjava2"]
    api(rootProject.ext.dependencies["rxandroid2"]) {
        exclude module: 'rxjava'
    }
    api(rootProject.ext.dependencies["rxcache2"]) {
        exclude module: 'rxjava'
        exclude module: 'dagger'
        exclude module: 'api'
    }
    implementation(rootProject.ext.dependencies["rxcache-jolyglot-gson"]) {
        exclude module: 'gson'
    }
    api(rootProject.ext.dependencies["rxlifecycle2"]) {
        exclude module: 'rxjava'
        exclude module: 'jsr305'
    }
    api(rootProject.ext.dependencies["rxlifecycle2-android"]) {
        exclude module: 'support-annotations'
        exclude module: 'rxjava'
        exclude module: 'rxandroid'
        exclude module: 'rxlifecycle'
    }
    api(rootProject.ext.dependencies["rxpermissions2"]) {
        exclude module: 'rxjava'
        exclude module: 'support-annotations'
    }
    api rootProject.ext.dependencies['rxerrorhandler2']

    //network
    api(rootProject.ext.dependencies["retrofit"]) {
        exclude module: 'okhttp'
        exclude module: 'okio'
    }
    implementation(rootProject.ext.dependencies["retrofit-converter-gson"]) {
        exclude module: 'gson'
        exclude module: 'okhttp'
        exclude module: 'okio'
        exclude module: 'retrofit'
    }
    implementation(rootProject.ext.dependencies["retrofit-adapter-rxjava2"]) {
        exclude module: 'rxjava'
        exclude module: 'okhttp'
        exclude module: 'retrofit'
        exclude module: 'okio'
    }
    api rootProject.ext.dependencies["okhttp3"]
//    compileOnly rootProject.ext.dependencies["glide"]
//    annotationProcessor(rootProject.ext.dependencies["glide-compiler"]) {
//        exclude module: 'jsr305'
//    }

    //tools
    compileOnly rootProject.ext.dependencies["javax.annotation"]
    api rootProject.ext.dependencies["dagger2"]
    annotationProcessor rootProject.ext.dependencies["dagger2-compiler"]
    compileOnly rootProject.ext.dependencies["androideventbus"]
    compileOnly rootProject.ext.dependencies["eventbus"]
    api rootProject.ext.dependencies["gson"]

    //test
    api rootProject.ext.dependencies["timber"]
    //SDK 版本低于26.1.0时，需要添加android.arch.lifecycle:extensions:1.0.0-alpha4，才能使用lifecycle框架
    implementation(rootProject.ext.dependencies["lifecycle-extensions"])
}
//打包aar
//uploadArchives {
//    repositories.mavenDeployer {
//        // Ubuntu本地仓库路径， Windows 为(url:"file://D://***/***/***/")
//        repository(url: "file://E://Learn/TestPro/2020-04-07/LocalRepository")
//        // 唯一标识
//        pom.groupId = "com.herenit.arms"
//        // 项目名称
//        pom.artifactId = "library-arms"
//        // 版本号
//        pom.version = "1.0.0"
//    }
//}


//////// 打包发布配置开始 ////////
ext {
    // 从Github上clone下来的项目的本地地址
    GITHUB_REPO_PATH = "file://E://Work/Repositories/arms"       //这里指定的就是刚刚新建项目后clone下来的在本地的路径

    PUBLISH_GROUP_ID = 'com.herenit.arms'

    PUBLISH_ARTIFACT_ID = 'library-arms'

    PUBLISH_VERSION = '1.0.0'

}

uploadArchives {
    repositories.mavenDeployer {
        def deployPath = file(project.GITHUB_REPO_PATH)
        repository(url: "file://${deployPath.absolutePath}")
        pom.project {
            groupId project.PUBLISH_GROUP_ID
            artifactId project.PUBLISH_ARTIFACT_ID
            version project.PUBLISH_VERSION
        }
    }
}

// 源代码一起打包
task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
}

//////// 打包发布配置结束 ////////
